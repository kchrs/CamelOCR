package com.hmocr.hmocr.camel;
import org.apache.camel.builder.RouteBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;


@Component
public class ExecRoute extends RouteBuilder {
    static Logger log = LoggerFactory.getLogger(ExecRoute.class);
    public final String  TESS_EXE="tesseract";
    public final String  TESS_LANG="-l";
    public final String TESS_OUTPUT="/mnt/tess-ocr/output/ yeah";



    @Override
    public void configure() throws Exception {
//        from("timer://foo?repeatCount=1")
//                .to("exec:ls")
//                .to("log:bar");
"Processing file
        from("file:/mnt/tess-ocr/input")
        //from("timer://foo?repeatCount=1")

                .process(exchange -> {

                    TESS_INPUT = exchange.getIn().getBody(File.class);
                log.info("Processing file: "+String.valueOf(TESS_INPUT));
//                    String tempFile = createFile();
//                    isCompletelyWritten(new File(tempFile));

                })
		 .to("exec:sh?args=-c tesseract "+TESS_INPUT+" "+TESS_LANG+" ell "+TESS_OUTPUT);
//                .to("exec:tesseract?args=/C"+TESS_LANG+" ell "+TESS_INPUT+" "+TESS_OUTPUT);
    }

    public String createFile(){
        String tempCreateFile=TESS_OUTPUT;
        if(tempCreateFile.contains(" ")){
            tempCreateFile = tempCreateFile.replace(",",".");
        }
        System.out.println(tempCreateFile);

        return tempCreateFile;
    }

    private boolean isCompletelyWritten(File file) {
        RandomAccessFile stream = null;
        try {
            stream = new RandomAccessFile(file, "rw");
            return true;
        } catch (Exception e) {
            log.info("Skipping file " + file.getName() + " for this iteration due it's not completely written");
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException e) {
                    log.error("Exception during closing file " + file.getName());
                }
            }
        }
        return false;
    }

}


